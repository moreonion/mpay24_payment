<?php

define('PAYMENT_MPAY24_STATUS_REDIRECT', 'payment_mpay24_status_redirect');

define('MPAY24_PAYMENT_CONFIRMATION_URL', 'mpay24_payment/confirm/handle/');
define('MPAY24_PAYMENT_CONFIRMATION_STATUS_URL', 'mpay24_payment/confirm/status/');
define('MPAY24_PAYMENT_CONFIRMATION_WAIT_URL', 'mpay24_payment/confirm/wait/');
define('MPAY24_PAYMENT_ERROR_URL', 'mpay24_payment/confirm/error/');
define('MPAY24_PAYMENT_SUCCESS_URL', 'mpay24_payment/confirm/success/');

use \Drupal\mpay24_payment\ControllerBase;

/**
 * Implements hook_menu()
 */
function mpay24_payment_menu() {
  $items = array();

  $default = array(
    'load arguments' => array('payment'),
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'mpay24_payment.confirmation.inc',
    'access callback' => 'mpay24_payment_confirmation_access',
    'access arguments' => array(3),
  );

  $items[MPAY24_PAYMENT_CONFIRMATION_URL . '%entity_object'] = array(
    'title' => 'Confirmation Interface',
    'page callback' => 'mpay24_payment_confirmation_interface_handler',
  ) + $default;
  $items[MPAY24_PAYMENT_SUCCESS_URL . '%entity_object'] = array(
    'page callback' => 'mpay24_payment_confirmation_success',
  ) + $default;
  $items[MPAY24_PAYMENT_ERROR_URL . '%entity_object'] = array(
    'page callback' => 'mpay24_payment_confirmation_error',
  ) + $default;
  $items[MPAY24_PAYMENT_CONFIRMATION_STATUS_URL . '%entity_object'] = array(
    'page callback' => 'mpay24_payment_confirmation_status',
  ) + $default;
  $items[MPAY24_PAYMENT_CONFIRMATION_WAIT_URL . '%entity_object'] = array(
    'page callback' => 'mpay24_payment_confirmation_wait',
  ) + $default;
  return $items;
}

function mpay24_payment_payment_status_info() {
  return array(
    new PaymentStatusInfo(array(
      'description' => t('User was redirected to mpay24. And we are waiting for them to redirect him/her back.'),
      'status' => PAYMENT_MPAY24_STATUS_REDIRECT,
      'parent' => PAYMENT_STATUS_PENDING,
      'title' => t('Redirected (waiting for the user to return).'),
    )),
  );
}

/**
 * Custom access handler
 *
 * @param $arg
 *   Argument form menu.
 *   Must be a payment object
 *
 * @return
 *   TRUE if argument is a payment instance
 *   and $_GET['TID'] matches it's transaction id.
 */
function mpay24_payment_confirmation_access($payment) {
  if ($payment instanceof Payment && isset($payment->tid)) {
    return isset($_GET['TID']) && $_GET['TID'] == $payment->tid;
  }
  return FALSE;
}



/**
 * Implements hook_payment_method_controller_info().
 */
function mpay24_payment_payment_method_controller_info() {
  return array(
    'PaymentMethodControllerMPay24CreditCard' => '\\Drupal\\mpay24_payment\\CreditCardController',
    'PaymentMethodControllerMPay24OnlineBanking' => '\\Drupal\\mpay24_payment\\OnlineBankingController',
    'PaymentMethodControllerMPay24Dummy' => '\\Drupal\\mpay24_payment\\DummyController',
  );
}

/**
 * ************************************
 * Payment Method entity CRUD functions
 * ************************************
 */

/**
 * Implements hook_entity_load().
 */
function mpay24_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    foreach ($entities as $method) {
      $data = &$method->controller_data;
      if (!empty($data['test_mode'])) {
        $data['merchantid'] = '9' . substr($data['merchantid'], 1);
      }
    }
  }
  elseif ($entity_type == 'payment') {
    $query = db_select('mpay24_payment_tids', 't')
      ->fields('t')
      ->condition('pid', array_keys($entities));
    $result = $query->execute();
    while ($data = $result->fetchAssoc()) {
      $payment = $entities[$data['pid']];
      $payment->tid     = $data['tid'];
      $payment->mpaytid = $data['mpaytid'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function mpay24_payment_payment_insert(Payment $payment) {
  if ($payment->method->controller instanceof ControllerBase) {
    db_insert('mpay24_payment_tids')
     ->fields(array(
       'pid' => $payment->pid,
       'tid' => isset($payment->tid) ? $payment->tid : '',
       'mpaytid' => isset($payment->mpaytid) ? $payment->mpaytid : NULL,
      ))
     ->execute();
  }
}
function mpay24_payment_payment_update(Payment $payment) {
  if ($payment->method->controller instanceof ControllerBase) {
    db_update('mpay24_payment_tids')
     ->fields(array(
       'tid' => isset($payment->tid) ? $payment->tid : '',
       'mpaytid' => isset($payment->mpaytid) ? $payment->mpaytid : NULL,
      ))
     ->condition('pid', $payment->pid)
     ->execute();
  }
}
function mpay24_payment_payment_delete(Payment $payment) {
  db_delete('mpay24_payment_tids')->condition('pid', $payment->pid)->execute();
}
