<?php

module_load_include('inc', 'mpay24_payment', 'mpay24_payment_method_controller_credit');
module_load_include('inc', 'mpay24_payment', 'mpay24_payment_method_controller_banking');

define('PAYMENT_MPAY24_STATUS_REDIRECT', 'payment_mpay24_status_redirect');

define('MPAY24_PAYMENT_CONFIRMATION_URL', 'mpay24_payment/confirm/handle');
define('MPAY24_PAYMENT_CONFIRMATION_STATUS_URL', 'mpay24_payment/confirm/status/');
define('MPAY24_PAYMENT_CONFIRMATION_WAIT_URL', 'mpay24_payment/confirm/wait/');
define('MPAY24_PAYMENT_ERROR_URL', 'mpay24_payment/confirm/error/');

/**
 * Implements hook_menu()
 */
function mpay24_payment_menu() {
  $items = array();

  $items[MPAY24_PAYMENT_CONFIRMATION_URL] = array(
    'title' => 'Confirmation Interface',
    'page callback' => 'mpay24_payment_confirmation_interface_handler',
    'access callback' => TRUE, // @todo: check mpay24 ip.
    'type' => MENU_CALLBACK,
    'file' => 'mpay24_payment.confirmation.inc',
  );

  $items[MPAY24_PAYMENT_ERROR_URL . '%entity_object'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'mpay24_payment_confirmation_error',
    'page arguments' => array(3),
    'access callback' => 'mpay24_payment_confirmation_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'mpay24_payment.confirmation.inc',
  );

  $items[MPAY24_PAYMENT_CONFIRMATION_STATUS_URL . '%entity_object'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'mpay24_payment_confirmation_status',
    'page arguments' => array(3),
    'access callback' => 'mpay24_payment_confirmation_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'mpay24_payment.confirmation.inc',
  );

  $items[MPAY24_PAYMENT_CONFIRMATION_WAIT_URL . '%entity_object'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'mpay24_payment_confirmation_wait',
    'page arguments' => array(3),
    'access callback' => 'mpay24_payment_confirmation_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'mpay24_payment.confirmation.inc',
  );
  return $items;
}

/**
 * Custom access handler
 *
 * @param $arg
 *   Argument form menu.
 *   Must be a payment object
 *
 * @return
 *   TRUE if argument is a payment instance
 *   Otherwise, return FALSE
 */
function mpay24_payment_confirmation_access($arg) {
  if ($arg instanceof Payment) {
    return TRUE;
  }
  return FALSE;
}



/**
 * Implements hook_payment_method_controller_info().
 */
function mpay24_payment_payment_method_controller_info() {
  return array(
    'PaymentMethodControllerMPay24CreditCard',
    'PaymentMethodControllerMPay24OnlineBanking',
  );
}

/**
 * Form build callback: implements
 * PaymentMethodController::payment_method_configuration_form_elements_callback.
 *
 * @return array
 *   A Drupal form.
 */
function mpay24_payment_payment_method_configuration_form_elements(array $form, array &$form_state) {
  $controller_data = $form_state['payment_method']->controller_data;

  $elements['merchantid'] = array(
    '#type' => 'textfield',
    '#title' => t('MPay24 MerchantID'),
    '#description' => t('Available from MPay24 support.'),
    '#default_value' => isset($controller_data['merchantid']) ? $controller_data['merchantid'] : '',
  );

  $elements['testmode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the test API') . ' (test.mpay24.com)',
    '#description' => t('Requires a different MerchantID.'),
    '#default_value' => isset($controller_data['testmode']) ? $controller_data['testmode'] : '',
  );

  $elements['request_timeout'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Timeout for payment requests'),
    '#description'   => t('Timeout for the payment request to MPay24 (in Seconds).'),
    '#default_value' => isset($controller_data['request_timeout']) ? $controller_data['request_timeout'] : 100.0,
  );

  return $elements;
}

/**
 * Implements form validate callback for
 * payment_mpay24_payment_method_configuration_form_elements().
 */
function mpay24_payment_payment_method_configuration_form_elements_validate(array $element, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $form_state['payment_method']->controller_data['request_timeout'] = $values['request_timeout'];
  $form_state['payment_method']->controller_data['merchantid'] = $values['merchantid'];
  $form_state['payment_method']->controller_data['testmode'] = $values['testmode'];
}

/**
 * ************************************
 * Payment Method entity CRUD functions
 * ************************************
 */

/**
 * Implements hook_entity_load().
 */
function mpay24_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    PaymentMethodControllerMPay24::load($entities);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function mpay24_payment_payment_method_insert(PaymentMethod $method) {
  if ($method->controller instanceof PaymentMethodControllerMpay24)
    $method->controller->insert();
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function mpay24_payment_payment_method_update(PaymentMethod $method) {
  if ($method->controller instanceof PaymentMethodControllerMpay24)
    $method->controller->update();
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function mpay24_payment_payment_method_delete($method) {
  if ($method->controller instanceof PaymentMethodControllerMpay24)
    $method->controller->delete();
}
